"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6255],{431:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"starting-from-scratch","title":"Starting From Scratch","description":"single-spa allows you to build micro frontends that coexist and can each be written with their own framework. This will allow you and your team to:","source":"@site/versioned_docs/version-4.x/starting-from-scratch.md","sourceDirName":".","slug":"/starting-from-scratch","permalink":"/docs/4.x/starting-from-scratch","draft":false,"unlisted":false,"editUrl":"https://github.com/single-spa/single-spa.js.org/blob/master/website/versioned_docs/version-4.x/starting-from-scratch.md","tags":[],"version":"4.x","frontMatter":{"id":"starting-from-scratch","title":"Starting From Scratch","sidebar_label":"Starting from scratch"},"sidebar":"docs","previous":{"title":"Overview of single-spa","permalink":"/docs/4.x/getting-started-overview"},"next":{"title":"React - Migrating to single-spa","permalink":"/docs/4.x/migrating-react-tutorial"}}');var i=a(4848),s=a(8453);const r={id:"starting-from-scratch",title:"Starting From Scratch",sidebar_label:"Starting from scratch"},o=void 0,l={},c=[{value:"1. Initial setup",id:"1-initial-setup",level:2},{value:"1.a Setup Babel",id:"1a-setup-babel",level:3},{value:"1.b Setup Webpack",id:"1b-setup-webpack",level:3},{value:"1.c Add npm scripts",id:"1c-add-npm-scripts",level:3},{value:"2. Create the HTML file",id:"2-create-the-html-file",level:2},{value:"2.a Create <em>index.html</em>",id:"2a-create-indexhtml",level:3},{value:"2.b Include scripts and stylesheets",id:"2b-include-scripts-and-stylesheets",level:3},{value:"3. Registering applications",id:"3-registering-applications",level:2},{value:"4. Create the home application",id:"4-create-the-home-application",level:2},{value:"4.a Setup home",id:"4a-setup-home",level:3},{value:"4.b Define home application lifecycles",id:"4b-define-home-application-lifecycles",level:3},{value:"4.c Build the React app",id:"4c-build-the-react-app",level:3},{value:"4.d Define the loading function",id:"4d-define-the-loading-function",level:3},{value:"5. Create the navBar application",id:"5-create-the-navbar-application",level:2},{value:"5.a Register navBar",id:"5a-register-navbar",level:3},{value:"5.b Setup NavBar",id:"5b-setup-navbar",level:3},{value:"5.c Define NavBar application lifecycles",id:"5c-define-navbar-application-lifecycles",level:3},{value:"5.d Build the navBar",id:"5d-build-the-navbar",level:3},{value:"5.e Set up navigation",id:"5e-set-up-navigation",level:3},{value:"6. Create the angularJS application",id:"6-create-the-angularjs-application",level:2},{value:"6.a Setup angularJS",id:"6a-setup-angularjs",level:3},{value:"6.b Register angularJS as an application",id:"6b-register-angularjs-as-an-application",level:3},{value:"6.c Set up Application Lifecycles",id:"6c-set-up-application-lifecycles",level:3},{value:"6.d Set up the AngularJS application",id:"6d-set-up-the-angularjs-application",level:3},{value:"6.e Set up in-app routing",id:"6e-set-up-in-app-routing",level:3},{value:"Finished!",id:"finished",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"single-spa allows you to build micro frontends that coexist and can each be written with their own framework. This will allow you and your team to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Use multiple frameworks on the same page. ",(0,i.jsx)(n.a,{href:"/docs/4.x/ecosystem#docsNav",children:"See the single-spa ecosystem for more info"})]}),"\n",(0,i.jsx)(n.li,{children:"Write code using a new framework, without rewriting your existing application"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Lazy_loading",children:"Lazy load"})," code for improved initial load time."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Single-spa can be used with just about any build system or JavaScript framework"}),", but this tutorial will focus on creating a web app with ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/",children:"Webpack"}),", ",(0,i.jsx)(n.a,{href:"https://reactjs.org/",children:"React"}),", and ",(0,i.jsx)(n.a,{href:"https://angularjs.org/",children:"AngularJS"}),". Our tutorial puts everything into a single code repository, but it is also possible to have ",(0,i.jsx)(n.a,{href:"/docs/4.x/separating-applications#option-3-dynamic-module-loading",children:"separate code repositories"})," for each of your applications."]}),"\n",(0,i.jsx)(n.p,{children:"For this tutorial we will be creating the following applications to showcase the power and usefulness of single-spa:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["home: a React app using ",(0,i.jsx)(n.a,{href:"https://reacttraining.com/react-router/",children:"React Router"})]}),"\n",(0,i.jsx)(n.li,{children:"navBar: a React app that always displays top-level navigation"}),"\n",(0,i.jsxs)(n.li,{children:["angularJS: an AngularJS app using ",(0,i.jsx)(n.a,{href:"https://ui-router.github.io/ng1/",children:"angular-ui-router"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The complete code for this example is in the ",(0,i.jsx)(n.a,{href:"https://github.com/alocke12992/single-spa-simple-example",children:(0,i.jsx)(n.code,{children:"single-spa-simple-example"})})," repository."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["We encourage you to read through all the ",(0,i.jsx)(n.a,{href:"/",children:"single-spa docs"})," to become familiar with the entire single-spa setup. Visit the ",(0,i.jsx)(n.a,{href:"https://github.com/single-spa/single-spa",children:"single-spa Github"}),", the ",(0,i.jsx)(n.a,{href:"https://single-spa.js.org/help.html",children:"help section"}),", or our community ",(0,i.jsx)(n.a,{href:"https://join.slack.com/t/single-spa/shared_invite/zt-2uvhef42o-g4H3mvKDaenE9xVAewBKww",children:"Slack"})," channel for more support."]})}),"\n",(0,i.jsx)(n.h2,{id:"1-initial-setup",children:"1. Initial setup"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["For this tutorial, we will be using ",(0,i.jsx)(n.a,{href:"https://yarnpkg.com/en/",children:"yarn"})," but npm has its own equivalent commands and can be used almost interchangibly."]})}),"\n",(0,i.jsxs)(n.p,{children:["Create a new folder for this project and navigate into it. Initialize a new project using your package manager, and then install single-spa as a dependency. Then create a ",(0,i.jsx)(n.em,{children:"src/"})," folder to hold all of our micro-service applications, with each in their own folder."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"mkdir single-spa-simple-example && cd single-spa-simple-example\nyarn init              # or npm init\nyarn add single-spa    # or npm install --save single-spa\nmkdir src\n"})}),"\n",(0,i.jsx)(n.h3,{id:"1a-setup-babel",children:"1.a Setup Babel"}),"\n",(0,i.jsxs)(n.p,{children:["We will be using ",(0,i.jsx)(n.a,{href:"https://babeljs.io/",children:"Babel"})," to compile our code. Install it and some additional dependencies using:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add --dev @babel/core @babel/preset-env @babel/preset-react @babel/plugin-syntax-dynamic-import @babel/plugin-proposal-object-rest-spread\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Next create a ",(0,i.jsx)(n.em,{children:".babelrc"})," file and paste in the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title=".babelrc"',children:'{\n  "presets": [\n    ["@babel/preset-env", {\n      "targets": {\n        "browsers": ["last 2 versions"]\n      }\n    }],\n    ["@babel/preset-react"]\n  ],\n  "plugins": [\n    "@babel/plugin-syntax-dynamic-import",\n    "@babel/plugin-proposal-object-rest-spread"\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Learn more about what each of these packages do by visiting the ",(0,i.jsx)(n.a,{href:"https://babeljs.io/docs/setup/",children:"Babel docs"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"1b-setup-webpack",children:"1.b Setup Webpack"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["It is important to point out that ",(0,i.jsx)(n.strong,{children:"you do not have to use Webpack in order use single-spa"}),". Learn more about ",(0,i.jsx)(n.a,{href:"/docs/4.x/separating-applications",children:"Separating applications"})," and the different ways you can use single-spa for your specific build."]})}),"\n",(0,i.jsx)(n.p,{children:"Run the following commands to add Webpack, Webpack plugins, and loaders."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"# Webpack core\nyarn add webpack webpack-dev-server webpack-cli --dev\n# Webpack plugins\nyarn add clean-webpack-plugin --dev\n# Webpack loaders\nyarn add style-loader css-loader html-loader babel-loader --dev\n"})}),"\n",(0,i.jsx)(n.p,{children:"Learn more about these Webpack plugins and loaders at their respective documentation pages."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/clean-webpack-plugin",children:"CleanWebpackPlugin"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://webpack.js.org/loaders/style-loader/",children:"style-loader"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://webpack.js.org/loaders/css-loader/",children:"css-loader"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://webpack.js.org/loaders/html-loader/",children:"html-Loader"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://webpack.js.org/loaders/babel-loader/",children:"babel-Loader"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In the root of your project create a new file name ",(0,i.jsx)(n.em,{children:"webpack.config.js"})," and paste in the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="webpack.config.js"',children:'const path = require("path");\nconst webpack = require("webpack");\nconst { CleanWebpackPlugin } = require("clean-webpack-plugin");\n\nmodule.exports = {\n  mode: "development",\n  entry: {\n    // Set the single-spa config as the project entry point\n    "single-spa.config": "./single-spa.config.js",\n  },\n  output: {\n    publicPath: "/dist/",\n    filename: "[name].js",\n    path: path.resolve(__dirname, "dist"),\n  },\n  module: {\n    rules: [\n      {\n        // Webpack style loader added so we can use materialize\n        test: /\\.css$/,\n        use: ["style-loader", "css-loader"],\n      },\n      {\n        test: /\\.js$/,\n        exclude: [path.resolve(__dirname, "node_modules")],\n        loader: "babel-loader",\n      },\n      {\n        // This plugin will allow us to use AngularJS HTML templates\n        test: /\\.html$/,\n        exclude: /node_modules/,\n        loader: "html-loader",\n      },\n    ],\n  },\n  node: {\n    fs: "empty",\n  },\n  resolve: {\n    modules: [path.resolve(__dirname, "node_modules")],\n  },\n  plugins: [\n    // A webpack plugin to remove/clean the output folder before building\n    new CleanWebpackPlugin(),\n  ],\n  devtool: "source-map",\n  externals: [],\n  devServer: {\n    historyApiFallback: true,\n  },\n};\n'})}),"\n",(0,i.jsx)(n.h3,{id:"1c-add-npm-scripts",children:"1.c Add npm scripts"}),"\n",(0,i.jsxs)(n.p,{children:["The last step in our project set up is to include a couple scripts in our package.json to run webpack-dev-server and to create a production build. Add the following to your ",(0,i.jsx)(n.em,{children:"package.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="package.json"',children:'"scripts": {\n  "start": "webpack-dev-server --open",\n  "build": "webpack --config webpack.config.js -p"\n},\n'})}),"\n",(0,i.jsx)(n.h2,{id:"2-create-the-html-file",children:"2. Create the HTML file"}),"\n",(0,i.jsxs)(n.p,{children:["Our goal in this step will be to create a ",(0,i.jsx)(n.strong,{children:"single-spa config"}),". The single-spa config file is where your applications are initialized, and an HTML page will request this config."]}),"\n",(0,i.jsx)(n.p,{children:"You\u2019ll want to keep your single-spa config as small as possible since it is the master controller and could easily become a maintenance bottleneck. You don\u2019t want to be constantly changing both the single-spa config and the child applications."}),"\n",(0,i.jsxs)(n.h3,{id:"2a-create-indexhtml",children:["2.a Create ",(0,i.jsx)(n.em,{children:"index.html"})]}),"\n",(0,i.jsxs)(n.p,{children:["Create an ",(0,i.jsx)(n.em,{children:"index.html"})," file the root directory. Inside this file, we'll be adding a ",(0,i.jsx)(n.code,{children:"div"})," element for each application, each with a unique ID. Mounting each application to a different point allows us to maintain them completely separated and so that they never try to modify the same DOM."]}),"\n",(0,i.jsx)(n.p,{children:"Paste in the following HTML markup:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="index.html"',children:'<html>\n  <head></head>\n  <body>\n    <div id="navBar"></div>\n    <div id="home"></div>\n    <div id="angularJS"></div>\n  </body>\n</html>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2b-include-scripts-and-stylesheets",children:"2.b Include scripts and stylesheets"}),"\n",(0,i.jsxs)(n.p,{children:["For styling, we will be using the ",(0,i.jsx)(n.a,{href:"https://materializecss.com/",children:"Materialize"})," framework. We can enable all of our applications to access the Materialize library by including the styles and scripts in ",(0,i.jsx)(n.em,{children:"index.html"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, to enable single-spa, we will need to include a script tag that references ",(0,i.jsx)(n.a,{href:"configuration#indexhtml-file",children:(0,i.jsx)(n.em,{children:"single-spa.config.js"})})," in ",(0,i.jsx)(n.em,{children:"index.html"}),". We will be adding and populating this file in the next step. Webpack outputs our built code to ",(0,i.jsx)(n.em,{children:"dist/"})," so that will be the path of ",(0,i.jsx)(n.em,{children:"single-spa.config.js"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="index.html"',children:'<html>\n  <head>\n    \x3c!-- Materialize --\x3e\n    <link\n      rel="stylesheet"\n      href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/css/materialize.min.css"\n    />\n    <link\n      href="https://fonts.googleapis.com/icon?family=Material+Icons"\n      rel="stylesheet"\n    />\n  </head>\n  <body>\n    <div id="navBar"></div>\n    <div id="home"></div>\n    <div id="angularJS"></div>\n\n    \x3c!-- jQuery --\x3e\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"><\/script>\n    \x3c!-- Materialize --\x3e\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/js/materialize.min.js"><\/script>\n    \x3c!-- import the single-spa config file --\x3e\n    <script src="/dist/single-spa.config.js"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"3-registering-applications",children:"3. Registering applications"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"configuration#registering-applications",children:"Registering applications"})," is how we tell single-spa when and how to ",(0,i.jsx)(n.code,{children:"bootstrap"}),", ",(0,i.jsx)(n.code,{children:"mount"}),", and ",(0,i.jsx)(n.code,{children:"unmount"})," an application."]}),"\n",(0,i.jsxs)(n.p,{children:["Create a new file called ",(0,i.jsx)(n.em,{children:"single-spa.config.js"})," in the root directory. Let's start by registering the ",(0,i.jsx)(n.code,{children:"home"})," application."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="single-spa.config.js"',children:'import { registerApplication, start } from "single-spa";\n\nregisterApplication(\n  // Name of our single-spa application\n  "home",\n  // loadingFunction\n  () => {},\n  // activityFunction\n  (location) =>\n    location.pathname === "" ||\n    location.pathname === "/" ||\n    location.pathname.startsWith("/home"),\n);\n\nstart();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The above code needs explanation. In order to register an application with single-spa, import and call the ",(0,i.jsx)(n.code,{children:"registerApplication"})," function; and include the application ",(0,i.jsx)(n.code,{children:"name"}),", a ",(0,i.jsx)(n.code,{children:"loadingFunction"}),", and an ",(0,i.jsx)(n.code,{children:"activityFunction"})," as parameters."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"loadingFunction"})," must be a function that returns a Promise (or an ",(0,i.jsxs)(n.a,{href:"https://ponyfoo.com/articles/understanding-javascript-async-await",children:[(0,i.jsx)(n.code,{children:"async"})," function"]}),"). The function will be called with no arguments when loading the application for the first time. The returned promise must resolve with the application code. We will come back to this in ",(0,i.jsx)(n.a,{href:"/docs/4.x/starting-from-scratch#4d-connect-to-single-spa-config",children:"Step 4.d"})," after creating the ",(0,i.jsx)(n.strong,{children:"home"})," application."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"activityFunction"})," must be a function that returns a truthy value that represents whether the application should be active, and must be a pure function. The function is provided ",(0,i.jsx)(n.code,{children:"window.location"})," as the first argument. The most common scenario is to determine if an application is active by looking at window.location, but not always. In this case, ",(0,i.jsx)(n.code,{children:"home"})," will be our root application so it will be shown at the root url paths as well as and url pathname that begins with ",(0,i.jsx)(n.code,{children:"/home"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Lastly, we also import the ",(0,i.jsx)(n.code,{children:"start"})," function from the single-spa package and call it in order for applications be mounted. Before ",(0,i.jsx)(n.code,{children:"start"})," is called, applications will be loaded into the browser but not bootstrapped/mounted/unmounted. Learn more about the ",(0,i.jsx)(n.a,{href:"configuration#calling-singlespastart",children:"start()"})," api here."]}),"\n",(0,i.jsx)(n.h2,{id:"4-create-the-home-application",children:"4. Create the home application"}),"\n",(0,i.jsx)(n.h3,{id:"4a-setup-home",children:"4.a Setup home"}),"\n",(0,i.jsxs)(n.p,{children:["Start by adding a ",(0,i.jsx)(n.em,{children:"home/"})," folder inside of the ",(0,i.jsx)(n.em,{children:"src/"})," directory. Then inside of ",(0,i.jsx)(n.em,{children:"home/"})," we will create two files: ",(0,i.jsx)(n.em,{children:"home.app.js"})," and ",(0,i.jsx)(n.em,{children:"root.component.js"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"mkdir src/home && cd src/home\ntouch home.app.js root.component.js\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"home"})," application will use React with ",(0,i.jsx)(n.a,{href:"https://reacttraining.com/react-router/web/example/animated-transitions",children:"React Router animated transitions"}),". Using your package manager, add ",(0,i.jsx)(n.code,{children:"react"}),", ",(0,i.jsx)(n.code,{children:"react-dom"}),", ",(0,i.jsx)(n.code,{children:"react-router-dom"}),", and ",(0,i.jsx)(n.a,{href:"/docs/4.x/ecosystem-react",children:(0,i.jsx)(n.code,{children:"single-spa-react"})})," as dependencies."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"single-spa-react"})," is a helper library that already implements single-spa lifecycle functions for React, so you don't have to implement these yourself."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"yarn add react react-dom single-spa-react react-router-dom react-transition-group\n"})}),"\n",(0,i.jsx)(n.p,{children:"Your file tree should now look similar to this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 src\n\u2502  \u2514\u2500\u2500 home\n\u2502       \u251c\u2500\u2500 home.app.js\n\u2502       \u2514\u2500\u2500 root.component.js\n\u251c\u2500\u2500 .babelrc\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 single-spa.config.js\n\u251c\u2500\u2500 webpack.config.js\n\u251c\u2500\u2500 yarn-error.log\n\u251c\u2500\u2500 yarn.lock\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4b-define-home-application-lifecycles",children:"4.b Define home application lifecycles"}),"\n",(0,i.jsxs)(n.p,{children:["Since we have registered our application, single-spa will be listening for the ",(0,i.jsx)(n.strong,{children:"home"})," application to bootstrap and mount. ",(0,i.jsx)(n.strong,{children:"home"})," app will be responsible for this. We will set this up in ",(0,i.jsx)(n.em,{children:"home.app.js"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/docs/4.x/ecosystem-react",children:"single-spa-react"})," provides the generic React lifecycle hooks for registering a singe-spa application, which we'll import as ",(0,i.jsx)(n.code,{children:"singleSpaReact"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"singleSpaReact"})," requires 4 parameters: the instance of React, the instance of ReactDOM, the rootComponent to be rendered (in this case, the ",(0,i.jsx)(n.code,{children:"Home"})," component), and a ",(0,i.jsx)(n.code,{children:"domElementGetter"})," function that return a DOMElement where the Home application will be bootstrapped, mounted, and unmounted by single-spa."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="home.app.js"',children:'import React from "react";\nimport ReactDOM from "react-dom";\nimport singleSpaReact from "single-spa-react";\nimport Home from "./root.component.js";\n\nfunction domElementGetter() {\n  return document.getElementById("home");\n}\n\nconst reactLifecycles = singleSpaReact({\n  React,\n  ReactDOM,\n  rootComponent: Home,\n  domElementGetter,\n});\n\nexport const bootstrap = [reactLifecycles.bootstrap];\n\nexport const mount = [reactLifecycles.mount];\n\nexport const unmount = [reactLifecycles.unmount];\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4c-build-the-react-app",children:"4.c Build the React app"}),"\n",(0,i.jsxs)(n.p,{children:["Now that we have the ",(0,i.jsx)(n.strong,{children:"home"})," application registered, let us build the React app. We've reproduced the code from ",(0,i.jsx)(n.a,{href:"https://reacttraining.com/react-router/web/example/animated-transitions",children:"react-router's Animated Transitions"})," below with two modifications, which are highlighted below. The first change is to add ",(0,i.jsx)(n.code,{children:"/home"})," as the basename prop for ",(0,i.jsx)(n.code,{children:"Router"}),", since in ",(0,i.jsx)(n.a,{href:"/docs/4.x/starting-from-scratch#step-three-registering-an-app",children:"Step 3"})," we had configured this application to handle routing at the ",(0,i.jsx)(n.code,{children:"/home"})," path. The second change is to the top-most div's styles so that ",(0,i.jsx)(n.strong,{children:"home"})," appears beneath the ",(0,i.jsx)(n.strong,{children:"navBar"})," that we'll create later."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{24,27} title="root.component.js"',children:'import React from "react";\nimport { TransitionGroup, CSSTransition } from "react-transition-group";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from "react-router-dom";\n\n/* you\'ll need this CSS somewhere\n.fade-enter {\n  opacity: 0;\n  z-index: 1;\n}\n\n.fade-enter.fade-enter-active {\n  opacity: 1;\n  transition: opacity 250ms ease-in;\n}\n*/\n\nconst AnimationExample = () => (\n  <Router basename="/home">\n    <Route\n      render={({ location }) => (\n        <div style={{ position: "relative", height: "100%" }}>\n          <Route\n            exact\n            path="/"\n            render={() => <Redirect to="/hsl/10/90/50" />}\n          />\n\n          <ul style={styles.nav}>\n            <NavLink to="/hsl/10/90/50">Red</NavLink>\n            <NavLink to="/hsl/120/100/40">Green</NavLink>\n            <NavLink to="/rgb/33/150/243">Blue</NavLink>\n            <NavLink to="/rgb/240/98/146">Pink</NavLink>\n          </ul>\n\n          <div style={styles.content}>\n            <TransitionGroup>\n              {/* no different than other usage of\n                CSSTransition, just make sure to pass\n                `location` to `Switch` so it can match\n                the old location as it animates out\n              */}\n              <CSSTransition key={location.key} classNames="fade" timeout={300}>\n                <Switch location={location}>\n                  <Route exact path="/hsl/:h/:s/:l" component={HSL} />\n                  <Route exact path="/rgb/:r/:g/:b" component={RGB} />\n                  {/* Without this `Route`, we would get errors during\n                    the initial transition from `/` to `/hsl/10/90/50`\n                  */}\n                  <Route render={() => <div>Not Found</div>} />\n                </Switch>\n              </CSSTransition>\n            </TransitionGroup>\n          </div>\n        </div>\n      )}\n    />\n  </Router>\n);\n\nconst NavLink = (props) => (\n  <li style={styles.navItem}>\n    <Link {...props} style={{ color: "inherit" }} />\n  </li>\n);\n\nconst HSL = ({ match: { params } }) => (\n  <div\n    style={{\n      ...styles.fill,\n      ...styles.hsl,\n      background: `hsl(${params.h}, ${params.s}%, ${params.l}%)`,\n    }}\n  >\n    hsl({params.h}, {params.s}%, {params.l}%)\n  </div>\n);\n\nconst RGB = ({ match: { params } }) => (\n  <div\n    style={{\n      ...styles.fill,\n      ...styles.rgb,\n      background: `rgb(${params.r}, ${params.g}, ${params.b})`,\n    }}\n  >\n    rgb({params.r}, {params.g}, {params.b})\n  </div>\n);\n\nconst styles = {};\n\nstyles.fill = {\n  position: "absolute",\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n};\n\nstyles.content = {\n  ...styles.fill,\n  top: "40px",\n  textAlign: "center",\n};\n\nstyles.nav = {\n  padding: 0,\n  margin: 0,\n  position: "absolute",\n  top: 0,\n  height: "40px",\n  width: "100%",\n  display: "flex",\n};\n\nstyles.navItem = {\n  textAlign: "center",\n  flex: 1,\n  listStyleType: "none",\n  padding: "10px",\n};\n\nstyles.hsl = {\n  ...styles.fill,\n  color: "white",\n  paddingTop: "20px",\n  fontSize: "30px",\n};\n\nstyles.rgb = {\n  ...styles.fill,\n  color: "white",\n  paddingTop: "20px",\n  fontSize: "30px",\n};\n\nexport default AnimationExample;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4d-define-the-loading-function",children:"4.d Define the loading function"}),"\n",(0,i.jsxs)(n.p,{children:["We will now define the ",(0,i.jsx)(n.a,{href:"configuration#loading-function",children:"loading function"})," for ",(0,i.jsx)(n.strong,{children:"home"})," in ",(0,i.jsx)(n.em,{children:"single-spa.config.js"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["One way of doing this is by simply passing in an ",(0,i.jsx)(n.em,{children:"application config object"})," (the ",(0,i.jsx)(n.code,{children:"reactLifecycles"})," functions we built in ",(0,i.jsx)(n.a,{href:"/docs/4.x/starting-from-scratch#b-application-lifecycles",children:"Step 4.b"})," are an example of this) directly to the ",(0,i.jsx)(n.code,{children:"registerApplication"})," function."]}),"\n",(0,i.jsxs)(n.p,{children:["However, to encourage best practices, we will leverage ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/guides/code-splitting/",children:"code splitting using Webpack"})," to easily lazy-load registered applications on-demand. Think about your project's needs when deciding which route to take."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{7} title="single-spa.config.js"',children:'import { registerApplication, start } from "single-spa";\n\nregisterApplication(\n  // Name of our single-spa application\n  "home",\n  // Our loading function\n  () => import("./src/home/home.app.js"),\n  // Our activity function\n  () =>\n    location.pathname === "" ||\n    location.pathname === "/" ||\n    location.pathname.startsWith("/home"),\n);\n\nstart();\n'})}),"\n",(0,i.jsx)(n.p,{children:"We are now ready to test out our first application."}),"\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"yarn start"})," in the root directory to start up the ",(0,i.jsx)(n.code,{children:"webpack-dev-server"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"5-create-the-navbar-application",children:"5. Create the navBar application"}),"\n",(0,i.jsxs)(n.p,{children:["Creating and registering our ",(0,i.jsx)(n.strong,{children:"navBar"})," application will be very similar to the process we used to create our ",(0,i.jsx)(n.strong,{children:"home"})," application. The main difference is that ",(0,i.jsx)(n.strong,{children:"navBar"})," will export as an object with lifecycle methods and use ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/guides/code-splitting/#dynamic-imports",children:"dynamic imports"})," (a Webpack 2+ feature) to obtain the application object."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["You may wish to revisit ",(0,i.jsx)(n.a,{href:"/docs/4.x/starting-from-scratch#3-registering-applications",children:"Step 3"})," for a more detailed explanation on how to register an application."]})}),"\n",(0,i.jsx)(n.h3,{id:"5a-register-navbar",children:"5.a Register navBar"}),"\n",(0,i.jsxs)(n.p,{children:["Just as before, register the ",(0,i.jsx)(n.strong,{children:"navBar"})," application using the ",(0,i.jsx)(n.code,{children:"registerApplication"})," in ",(0,i.jsx)(n.em,{children:"single-spa.config.js"}),". Two items should be called out here:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Notice that we are using ",(0,i.jsx)(n.code,{children:".then()"})," after our import in the loadingFunction. This is because this application is returning an application config object, and we access the actual ",(0,i.jsx)(n.strong,{children:"navBar"})," application as a property and return it."]}),"\n",(0,i.jsxs)(n.li,{children:["Recall that the activityFunction should return a truthy value when the application should be active. Since we want our ",(0,i.jsx)(n.strong,{children:"navBar"})," to be always be displayed, regardless of any other displayed applications, we define a function that will always return ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{3-7} title="single-spa.config.js"',children:"import {registerApplication, start} from 'single-spa'\n\nregisterApplication(\n  'navBar',\n  () => import('./src/navBar/navBar.app.js').then(module => module.navBar),\n  () => true\n);\n\n...\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["Don't forget to define a corresponding mount point for ",(0,i.jsx)(n.em,{children:"every newly registered application"})," in your root HTML file. We did this already in ",(0,i.jsx)(n.a,{href:"/docs/4.x/starting-from-scratch#2a-create-indexhtml",children:"Step 2.a"})," so just remember to do so for each new application in the future."]})}),"\n",(0,i.jsx)(n.h3,{id:"5b-setup-navbar",children:"5.b Setup NavBar"}),"\n",(0,i.jsxs)(n.p,{children:["Now that we have registered our application, let's create a new ",(0,i.jsx)(n.em,{children:"navBar/"})," folder in the ",(0,i.jsx)(n.em,{children:"src/"})," directory to contain ",(0,i.jsx)(n.em,{children:"navBar.app.js"})," and ",(0,i.jsx)(n.em,{children:"root.component.js"})," files."]}),"\n",(0,i.jsx)(n.p,{children:"From the root directory:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"mkdir src/navBar\ntouch src/navBar/navBar.app.js src/navBar/root.component.js\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5c-define-navbar-application-lifecycles",children:"5.c Define NavBar application lifecycles"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.em,{children:"navbar.app.js"})," add the following application lifecycles. This is slightly different from how we accomplished this in ",(0,i.jsx)(n.a,{href:"/docs/4.x/starting-from-scratch#b-application-lifecycles",children:"Step 4.b"}),". For this application we are going to demonstrate how you can export an object which contains the required lifecycle methods using ",(0,i.jsx)(n.code,{children:"single-spa-react"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="navbar.app.js"',children:'import React from "react";\nimport ReactDOM from "react-dom";\nimport singleSpaReact from "single-spa-react";\nimport NavBar from "./root.component.js";\n\nfunction domElementGetter() {\n  return document.getElementById("navBar");\n}\n\nexport const navBar = singleSpaReact({\n  React,\n  ReactDOM,\n  rootComponent: NavBar,\n  domElementGetter,\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5d-build-the-navbar",children:"5.d Build the navBar"}),"\n",(0,i.jsxs)(n.p,{children:["Recall that Materialize is included so we can use the class names it provides inside of the ",(0,i.jsx)(n.strong,{children:"navBar"})," component. Include the following in ",(0,i.jsx)(n.em,{children:"root.component.js"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="root.component.js"',children:'import React from "react";\n\nconst NavBar = () => (\n  <nav>\n    <div className="nav-wrapper">\n      <a className="brand-logo">single-spa</a>\n      <ul id="nav-mobile" className="right hide-on-med-and-down">\n        <li>\n          <a>Home</a>\n        </li>\n        <li>\n          <a>AngularJS</a>\n        </li>\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default NavBar;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5e-set-up-navigation",children:"5.e Set up navigation"}),"\n",(0,i.jsxs)(n.p,{children:["With single-spa, there are a number of options that will allow us to navigate between our separate SPAs. single-spa provides ",(0,i.jsx)(n.a,{href:"/docs/4.x/api#navigatetourl",children:(0,i.jsx)(n.code,{children:"navigateToUrl"})}),", a utility function that allows for easy url navigation between registered applications."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["An alternative method would be to call ",(0,i.jsx)(n.code,{children:"pushState()"}),", which ",(0,i.jsx)(n.code,{children:"navigateToUrl"})," does internally. This method could be used in conjunction with other client-side libraries but there are some ",(0,i.jsxs)(n.a,{href:"https://github.com/single-spa/single-spa-examples/issues/54#issuecomment-424384123",children:["additional considerations when using ",(0,i.jsx)(n.code,{children:"pushState"})]}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["To use the function, we simply need to import it and call it with a click event, passing in each application's url (as designated by the activityFunction set in ",(0,i.jsx)(n.em,{children:"single-spa.config.js"}),") as a string to the anchor tag's ",(0,i.jsx)(n.code,{children:"href"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{2,7,9,10} title="root.component.js"',children:'import React from "react";\nimport { navigateToUrl } from "single-spa";\n\nconst NavBar = () => (\n  <nav>\n    <div className="nav-wrapper">\n      <a href="/" onClick={navigateToUrl} className="brand-logo">\n        single-spa\n      </a>\n      <ul id="nav-mobile" className="right hide-on-med-and-down">\n        <li>\n          <a href="/" onClick={navigateToUrl}>\n            Home\n          </a>\n        </li>\n        <li>\n          <a href="/angularJS" onClick={navigateToUrl}>\n            AngularJS\n          </a>\n        </li>\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default NavBar;\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["We have yet to build the AngularJS application that corresponds to the ",(0,i.jsx)(n.code,{children:"/angularJS"})," URL so navigating to it at this point will fail."]})}),"\n",(0,i.jsx)(n.h2,{id:"6-create-the-angularjs-application",children:"6. Create the angularJS application"}),"\n",(0,i.jsx)(n.h3,{id:"6a-setup-angularjs",children:"6.a Setup angularJS"}),"\n",(0,i.jsxs)(n.p,{children:["Create a new folder in the src directory to contain the ",(0,i.jsx)(n.strong,{children:"angularJS"})," application files. There are quite a few to create."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir src/angularJS\ncd src/angularJS\ntouch angularJS.app.js root.component.js root.template.html routes.js app.module.js gifs.component.js gifs.template.html\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To demonstrate the ability to use client-side routing within applications, our AngularJS application will make use of ",(0,i.jsx)(n.code,{children:"angular-ui-router"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Using your package manager, add ",(0,i.jsx)(n.code,{children:"angular"}),", ",(0,i.jsx)(n.code,{children:"angular-ui-router"}),", and ",(0,i.jsx)(n.a,{href:"/docs/4.x/ecosystem-angularjs",children:(0,i.jsx)(n.code,{children:"single-spa-angularjs"})})," (the single-spa AngularJS helper) as dependencies, like so:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"yarn add angular angular-ui-router single-spa-angularjs\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Within the ",(0,i.jsx)(n.a,{href:"/docs/4.x/ecosystem",children:"single-spa ecosystem"})," there is a growing number of projects that help you bootstrap, mount, and unmount your applications that are written with popular frameworks."]})}),"\n",(0,i.jsx)(n.h3,{id:"6b-register-angularjs-as-an-application",children:"6.b Register angularJS as an application"}),"\n",(0,i.jsxs)(n.p,{children:["Just as we did for the ",(0,i.jsx)(n.strong,{children:"home"})," and ",(0,i.jsx)(n.strong,{children:"navBar"})," applications, we start by registering the ",(0,i.jsx)(n.strong,{children:"angularJS"})," application in ",(0,i.jsx)(n.em,{children:"single-spa.config.js"}),". Add the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="single-spa.config.js"',children:'registerApplication(\n  "angularJS",\n  () => import("./src/angularJS/angularJS.app.js"),\n  () => {},\n);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Hard-coding the activityFunction begins to get tedious so let us add a function that will simplify the matching logic for our application configuration. To do this, we've created a function that takes a string that represents the path prefix and returns a function that accepts ",(0,i.jsx)(n.code,{children:"location"})," and matches whether the ",(0,i.jsx)(n.code,{children:"location"})," starts with the path prefix."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{3-7,12} title="single-spa.config.js"',children:"...\n\nfunction pathPrefix(prefix) {\n    return function(location) {\n        return location.pathname.startsWith(prefix);\n    }\n}\n\nregisterApplication(\n  'angularJS',\n  () => import ('./src/angularJS/angularJS.app.js'),\n  pathPrefix('/angularJS')\n));\n\nstart();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"6c-set-up-application-lifecycles",children:"6.c Set up Application Lifecycles"}),"\n",(0,i.jsxs)(n.p,{children:["single-spa-angularjs another helper library that implements the necessary lifecycle hooks, which simplifies the configuration. Learn more about the ",(0,i.jsx)(n.a,{href:"/docs/4.x/ecosystem-angularjs#options",children:"single-spa-angularjs options"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Just as we did for our ",(0,i.jsx)(n.strong,{children:"home"})," and ",(0,i.jsx)(n.strong,{children:"navBar"})," applications, set up the lifecycle hooks for the ",(0,i.jsx)(n.strong,{children:"angularJS"})," in the ",(0,i.jsx)(n.em,{children:"angularJS.app.js"})," file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="angularJS.app.js"',children:'import singleSpaAngularJS from "single-spa-angularjs";\nimport angular from "angular";\nimport "./app.module.js";\nimport "./routes.js";\n\nconst domElementGetter = () => document.getElementById("angularJS");\n\nconst angularLifecycles = singleSpaAngularJS({\n  angular,\n  domElementGetter,\n  mainAngularModule: "angularJS-app",\n  uiRouter: true,\n  preserveGlobal: false,\n});\n\nexport const bootstrap = [angularLifecycles.bootstrap];\n\nexport const mount = [angularLifecycles.mount];\n\nexport const unmount = [angularLifecycles.unmount];\n'})}),"\n",(0,i.jsx)(n.h3,{id:"6d-set-up-the-angularjs-application",children:"6.d Set up the AngularJS application"}),"\n",(0,i.jsx)(n.p,{children:"Now that we have registered our application and set up the lifecycle methods pointing to our main Angular module, we can begin to flesh out the application."}),"\n",(0,i.jsxs)(n.p,{children:["To start, we will build ",(0,i.jsx)(n.em,{children:"app.module.js"})," followed by ",(0,i.jsx)(n.em,{children:"root.component.js"})," which will set the root of the ",(0,i.jsx)(n.strong,{children:"angularJS"})," application using ",(0,i.jsx)(n.em,{children:"root.template.html"})," as the template."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="app.module.js"',children:'import angular from "angular";\nimport "angular-ui-router";\n\nangular.module("angularJS-app", ["ui.router"]);\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="root.component.js"',children:'import angular from "angular";\nimport template from "./root.template.html";\n\nangular.module("angularJS-app").component("root", {\n  template,\n});\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="root.template.html"',children:'<div ng-style="vm.styles">\n  <div class="container">\n    <div class="row">\n      <h4 class="light">Angular 1 example</h4>\n      <p class="caption">\n        This is a sample application written with Angular 1.5 and\n        angular-ui-router.\n      </p>\n    </div>\n    <div>\n      \x3c!-- These Routes will be set up in the routes.js file --\x3e\n      <a\n        class="waves-effect waves-light btn-large"\n        href="/angularJS/gifs"\n        style="margin-right: 10px"\n      >\n        Show me cat gifs\n      </a>\n      <a\n        class="waves-effect waves-light btn-large"\n        href="/angularJS"\n        style="margin-right: 10px"\n      >\n        Take me home\n      </a>\n    </div>\n    <div class="row">\n      <ui-view />\n    </div>\n  </div>\n</div>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Next we will add a basic Gif Component and import it in the root component."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="gifs.component.js"',children:'import angular from "angular";\nimport template from "./gifs.template.html";\n\nangular.module("angularJS-app").component("gifs", {\n  template,\n  controllerAs: "vm",\n  controller($http) {\n    const vm = this;\n\n    $http\n      .get("https://api.giphy.com/v1/gifs/search?q=cat&api_key=dc6zaTOxFJmzC")\n      .then((response) => {\n        vm.gifs = response.data.data;\n      })\n      .catch((err) => {\n        setTimeout(() => {\n          throw err;\n        }, 0);\n      });\n  },\n});\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="gifs.template.html"',children:'<div style="padding-top: 20px">\n  <h4 class="light">Cat Gifs gifs</h4>\n  <p></p>\n  <div ng-repeat="gif in vm.gifs" style="margin: 5px;">\n    <img ng-src="{{gif.images.downsized_medium.url}}" class="col l3" />\n  </div>\n</div>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"6e-set-up-in-app-routing",children:"6.e Set up in-app routing"}),"\n",(0,i.jsxs)(n.p,{children:["Now that we have each of our components built out, all we have left to do is connect them. We will do this by importing both into ",(0,i.jsx)(n.em,{children:"routes.js"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="routes.js"',children:'import angular from "angular";\nimport "./root.component.js";\nimport "./gifs.component.js";\n\nangular.module("angularJS-app").config(($stateProvider, $locationProvider) => {\n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false,\n  });\n\n  $stateProvider\n    .state("root", {\n      url: "/angularJS",\n      template: "<root />",\n    })\n\n    .state("root.gifs", {\n      url: "/gifs",\n      template: "<gifs />",\n    });\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"finished",children:"Finished!"}),"\n",(0,i.jsxs)(n.p,{children:["From the root directory run ",(0,i.jsx)(n.code,{children:"yarn start"})," to check out your new single-spa project."]}),"\n",(0,i.jsxs)(n.p,{children:["We hope this tutorial gives you experience building and implementing micro frontends using single-spa. Review this guide periodically and use it as a reference in your projects. If you still have questions about how to use single-spa with your specific build, check out the migration tutorials: for ",(0,i.jsx)(n.a,{href:"/docs/4.x/migrating-angularJS-tutorial",children:"AngularJS"})," and ",(0,i.jsx)(n.a,{href:"/docs/4.x/migrating-react-tutorial",children:"React"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["As always, there is more to be learned. If you want to learn how to use single-spa with Angular, Vue, or other frameworks/build systems, checkout the ",(0,i.jsx)(n.a,{href:"https://github.com/single-spa/single-spa-examples",children:(0,i.jsx)(n.code,{children:"single-spa-examples"})})," repo. Lastly, you may also want to study how to ",(0,i.jsx)(n.a,{href:"/docs/4.x/separating-applications",children:"separate applications"})," using single-spa."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(6540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);